{"version":3,"sources":["components/MessageScreen.js","components/ShapeForm.js","constants/symbols.js","utils/index.js","components/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["MessageScreen","_ref","messages","react_default","a","createElement","className","length","map","message","i","key","modalStyle","overlay","backgroundColor","ShapeCountModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","outerStyle","position","top","left","width","height","overflow","zIndex","style","modal","objectSpread","padding","boxSizing","margin","borderRadius","textAlign","boxShadow","bottom","right","display","isModalOpen","children","Component","ShapeForm","ShapeForm_ShapeCountModal","closeModal","dist_default","min","max","defaultValue","value","shapeCount","onChange","handleInputValue","onClick","symbols","getItems","count","offset","arguments","undefined","Array","from","v","k","id","concat","content","SYMBOLS","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","MainScreen","state","items","selected","toastOpen","toastMessage","isInnerModalOpen","id2List","droppable","droppable2","getList","onDragEnd","draggableId","setState","activityHistoryMessage","openModal","newMessage","toConsumableArray","handleToastMessage","sourceIndex","item","handleRemoveMessage","setTimeout","bind","_this2","_this$state","Fragment","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","getListStyle","isDraggingOver","assign","draggableProps","dragHandleProps","getItemStyle","isDragging","removeItem","placeholder","getShapeListStyle","components_MessageScreen","components_ShapeForm","draggableStyle","userSelect","border","background","minHeight","App","components_MainScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d8ae5929.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n//Keeps logs of deletion or insertion operations on the list.\r\nconst MessageScreen = ({messages}) => {\r\n    return(\r\n        <div className=\"messages\">\r\n            {\r\n                messages.length>0 &&\r\n                <ul className=\"list\">\r\n                    <h4>Activity History</h4>\r\n                    {messages.map((message, i) => (\r\n                        <li key={i}>\r\n                            {message}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageScreen;","import React, { Component } from 'react'\r\nimport SlidingInput from 'sliding-input'\r\n\r\nconst modalStyle = {\r\n\toverlay: {\r\n\t\tbackgroundColor: \"rgba(0, 0, 0,0.5)\"\r\n\t}\r\n};\r\n\r\n//The component we define how many shapes will be in the project.\r\nconst ShapeForm = (props) => {\r\n    return(\r\n        <ShapeCountModal\r\n            isModalOpen={props.isModalOpen}\r\n            closeModal={props.closeModal}\r\n            style={modalStyle}\r\n        >\r\n            <span>How many shapes do you want to create?</span>\r\n            <br/>\r\n            <SlidingInput\r\n                min={1}\r\n                max={25}\r\n                defaultValue={15}\r\n                value={props.shapeCount}\r\n                onChange={props.handleInputValue}\r\n            />\r\n            <br/>\r\n            <button className=\"modal-button\" onClick={props.closeModal}>\r\n                Save\r\n            </button>\r\n        </ShapeCountModal>\r\n    )\r\n}\r\n\r\n//modal to open when the project is loaded.\r\nclass ShapeCountModal extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.outerStyle = {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\ttop: 0,\r\n\t\t\tleft: 0,\r\n\t\t\twidth: \"100%\",\r\n\t\t\theight: \"100%\",\r\n\t\t\toverflow: \"auto\",\r\n\t\t\tzIndex: 1\r\n\t\t};\r\n\r\n\t\tthis.style = {\r\n\t\t\tmodal: {\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t\twidth: 500,\r\n\t\t\t\tpadding: 20,\r\n\t\t\t\tboxSizing: \"border-box\",\r\n\t\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\t\tmargin: \"40px auto\",\r\n\t\t\t\tborderRadius: 3,\r\n\t\t\t\tzIndex: 2,\r\n\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\tboxShadow: \"0 20px 30px rgba(0, 0, 0, 0.2)\",\r\n\t\t\t\t...this.props.style.modal\r\n\t\t\t},\r\n\t\t\toverlay: {\r\n\t\t\t\tposition: \"fixed\",\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tbottom: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tright: 0,\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\t\t\t\tbackgroundColor: \"rgba(0,0,0,0.5)\",\r\n\t\t\t\t...this.props.style.overlay\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...this.outerStyle,\r\n\t\t\t\t\tdisplay: this.props.isModalOpen ? \"block\" : \"none\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div style={this.style.overlay}/>\r\n\t\t\t\t<div style={this.style.modal}>{this.props.children}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ShapeForm;","export default ['☯', '🎕', '🎗', '🎖', '🏜', '∞', '☾', '🌤', '🌶', '🍽', '☢', '♫', '☀', '❤', '★', '❀', '⌘', '✲', '⎈', '❖', '◆', '𝛂', '◇', '▲', '✿']","import SYMBOLS from '../constants/symbols'\r\n\r\n//Used to retrieve elements when the list is first created.\r\nexport const getItems = (count, offset = 0) =>\r\nArray.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `i${k + offset}`,\r\n    content: `${SYMBOLS[k]} i${k + offset}`\r\n}));\r\n\r\n//Used to relocate elements in the same list.\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\n//Used to change elements between lists\r\nexport const move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport MessageScreen from './MessageScreen'\r\nimport ShapeForm from './ShapeForm'\r\nimport { getItems, reorder, move } from '../utils'\r\n\r\nclass MainScreen extends Component{\r\n    state = {\r\n        items: [],\r\n        selected: [],\r\n        messages: [],\r\n        toastOpen: false,\r\n        toastMessage: '',\r\n        isModalOpen: false,\r\n        isInnerModalOpen: false,\r\n        shapeCount: 1\r\n    };\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n    getList = id => this.state[this.id2List[id]];\r\n\r\n    //The place where we specify what will happen when the shape is dragging.\r\n    onDragEnd = result => {\r\n        const { source, destination, draggableId } = result;\r\n        if (!destination) {\r\n            return;\r\n        }\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n            let state = { items };\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n            this.setState(state);\r\n        } else {\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n            this.activityHistoryMessage(destination.droppableId, draggableId, result, destination)\r\n        }\r\n    }\r\n\r\n    //We kept record of what happened when we stopped dragging.\r\n    activityHistoryMessage(droppableId, draggableId, result, destination){\r\n        const { selected } = this.state\r\n        if(droppableId === 'droppable2'){\r\n            let message = ''\r\n            if((selected.length === 0))\r\n            {\r\n                message = `${draggableId} added top of the list`\r\n            }else if(typeof result.droppable2[destination.index-1] === \"undefined\"){\r\n                message = `${draggableId} added top of the list`\r\n            }\r\n            else{\r\n                message = `${draggableId} added after ${result.droppable2[destination.index-1]['id']}`\r\n            }\r\n            const newMessage = [...this.state.messages, message]\r\n            this.setState({\r\n                messages: newMessage,\r\n                toastMessage: message,\r\n                toastOpen: true\r\n            })\r\n            this.handleToastMessage()\r\n        }\r\n    }\r\n    //To remove the shape from the list.\r\n    removeItem(sourceIndex, item){\r\n        var source = { index: sourceIndex, droppableId: 'droppable2'}\r\n        var destination = { droppableId: 'droppable', index: 0 }\r\n        const result = move(\r\n            this.state.selected,\r\n            this.state.items,\r\n            source,\r\n            destination\r\n        );\r\n        this.handleRemoveMessage(result, item)\r\n    }\r\n    //Information message if the figure is removed from the list\r\n    handleRemoveMessage(result, item){\r\n        let message = `${item['id']} removed the list`\r\n        const newMessage = [...this.state.messages, message]\r\n        this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2,\r\n            messages: newMessage,\r\n            toastMessage: message,\r\n            toastOpen: true\r\n        });\r\n        this.handleToastMessage()\r\n    }\r\n    //Print out operations on the shape as a toast message.\r\n    handleToastMessage(){\r\n        setTimeout(\r\n            function() {\r\n                this.setState({toastOpen: false});\r\n            }\r\n            .bind(this),\r\n            3000\r\n        );\r\n    }\r\n    closeModal = () => {\r\n        const { shapeCount } = this.state\r\n\t\tthis.setState({\r\n            isModalOpen: false,\r\n            items: getItems(shapeCount),\r\n            selected: getItems(0, shapeCount),\r\n\t\t});\r\n    }\r\n    componentDidMount(){\r\n        this.openModal()\r\n    }\r\n\topenModal = () => {\r\n\t\tthis.setState({\r\n\t\t\tisModalOpen: true\r\n\t\t});\r\n    }\r\n    //Function that we have captured the number of shape changes.\r\n    handleInputValue = (value) => {\r\n        this.setState({\r\n            shapeCount: value\r\n        })\r\n    }\r\n    render(){\r\n        const {\r\n            messages,\r\n            toastOpen,\r\n            toastMessage,\r\n            shapeCount,\r\n            isModalOpen,\r\n            selected,\r\n            items\r\n        } = this.state\r\n        return(\r\n            <>\r\n                <div className=\"wrapper\">\r\n                    <DragDropContext onDragEnd={this.onDragEnd}>\r\n                        <div className='list-area'>\r\n                            <Droppable droppableId=\"droppable2\">\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        style={getListStyle(snapshot.isDraggingOver)}>\r\n                                        {selected.map((item, index) => (\r\n                                            <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <div>\r\n                                                        <div\r\n                                                            ref={provided.innerRef}\r\n                                                            {...provided.draggableProps}\r\n                                                            {...provided.dragHandleProps}\r\n                                                            style={getItemStyle(\r\n                                                                snapshot.isDragging,\r\n                                                                provided.draggableProps.style\r\n                                                            )}>\r\n                                                            <span className=\"shape\">{item.content}</span>\r\n                                                            <br/>\r\n                                                            <span onClick={() => this.removeItem(index, item)} className=\"delete\">🗑️</span>\r\n                                                        </div>\r\n                                                        <div id=\"arrow\">🠻</div>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                        <div className=\"shape-area\">\r\n                            <Droppable droppableId=\"droppable\">\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        style={getShapeListStyle(snapshot.isDraggingOver)}>\r\n                                        {items.map((item, index) => (\r\n                                            <Draggable\r\n                                                key={item.id}\r\n                                                draggableId={item.id}\r\n                                                index={index}>\r\n                                                {(provided, snapshot) => (\r\n                                                    <div\r\n                                                        ref={provided.innerRef}\r\n                                                        {...provided.draggableProps}\r\n                                                        {...provided.dragHandleProps}\r\n                                                        style={getItemStyle(\r\n                                                            snapshot.isDragging,\r\n                                                            provided.draggableProps.style\r\n                                                        )}>\r\n                                                        <span className=\"shape\">{item.content}</span>\r\n                                                    </div>\r\n                                                )}\r\n                                            </Draggable>\r\n                                        ))}\r\n                                        {provided.placeholder}\r\n                                    </div>\r\n                                )}\r\n                            </Droppable>\r\n                        </div>\r\n                    </DragDropContext>\r\n                </div>\r\n                {\r\n                    toastOpen &&\r\n                    <div id='snackbar'>{toastMessage}</div>\r\n                }\r\n                <MessageScreen messages={messages}/>\r\n                <ShapeForm\r\n                    shapeCount={shapeCount}\r\n                    handleInputValue={this.handleInputValue}\r\n                    closeModal={this.closeModal}\r\n                    isModalOpen={isModalOpen}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    userSelect: 'none',\r\n    padding: 12,\r\n    margin: `0 auto 3px auto`,\r\n    width: '200px',\r\n    borderRadius: '6px',\r\n    border: '1px dashed pink',\r\n    background: isDragging ? 'lightgreen' : 'white',\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = () => ({\r\n    background: '#F5F3F3',\r\n    margin: '0 auto',\r\n    minHeight: '500px',\r\n    width: '25%'\r\n});\r\n\r\nconst getShapeListStyle = () => ({\r\n    background: '#F5F3F3',\r\n    margin: '0 auto',\r\n    minHeight: '500px',\r\n});\r\n\r\nexport default MainScreen;","import React, { Component } from 'react';\nimport './style.css';\nimport MainScreen from './components/MainScreen'\n\nclass App extends Component {\n  render() {\n    return (\n      <MainScreen />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}