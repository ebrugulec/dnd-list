{"version":3,"sources":["constants/symbols.js","components/ShapeScreen.js","components/MessageScreen.js","components/ShapeCountModal.js","components/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["symbols","Component","MessageScreen","_ref","messages","react_default","a","createElement","className","length","map","message","i","key","ShapeCountModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","outerStyle","position","top","left","width","height","overflow","zIndex","style","modal","objectSpread","padding","boxSizing","backgroundColor","margin","borderRadius","textAlign","boxShadow","overlay","bottom","right","display","isModalOpen","onClick","closeModal","children","getItems","count","offset","arguments","undefined","Array","from","v","k","id","concat","content","SYMBOLS","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","userSelect","grid","background","getListStyle","isDraggingOver","minHeight","modalStyle","mainStyle","app","button","border","color","MainScreen","state","items","selected","toastOpen","toastMessage","isInnerModalOpen","shapeCount","id2List","droppable","droppable2","getList","onDragEnd","draggableId","setState","console","log","newMessage","toConsumableArray","setTimeout","bind","assertThisInitialized","openModal","handleInputValue","value","sourceIndex","item","_this2","_this$state","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","assign","draggableProps","dragHandleProps","handleTrash","placeholder","components_MessageScreen","components_ShapeCountModal","dist_default","min","max","defaultValue","onChange","marginTop","App","components_MainScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d9852fc5.chunk.js","sourcesContent":["export default ['‚òØ', 'üéï', 'üéó', 'üéñ', 'üèú', '‚àû', '‚òæ', 'üå§', 'üå∂', 'üçΩ', '‚ò¢', '‚ô´', '‚òÄ', '‚ù§', '‚òÖ', '‚ùÄ', '‚åò', '‚ú≤', '‚éà', '‚ùñ', '‚óÜ', 'ùõÇ', '‚óá', '‚ñ≤', '‚úø']","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\n\r\nclass ShapeScreen extends Component{\r\n    render(){\r\n        return(\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={this.props.getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.props.items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={this.props.getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style\r\n                                            )}>\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                </DragDropContext>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShapeScreen;","import React from 'react'\r\n\r\nconst MessageScreen = ({messages}) => {\r\n    return(\r\n        <div className=\"messages\">\r\n            {\r\n                messages.length>0 &&\r\n                <ul className=\"list\">\r\n                <h4>Activity History</h4>\r\n                    {messages.map((message, i) => (\r\n                        <li key={i}>\r\n                            {message}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageScreen;","import React, { Component } from 'react'\r\nclass ShapeCountModal extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.outerStyle = {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\ttop: 0,\r\n\t\t\tleft: 0,\r\n\t\t\twidth: \"100%\",\r\n\t\t\theight: \"100%\",\r\n\t\t\toverflow: \"auto\",\r\n\t\t\tzIndex: 1\r\n\t\t};\r\n\r\n\t\t// default style\r\n\t\tthis.style = {\r\n\t\t\tmodal: {\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t\twidth: 500,\r\n\t\t\t\tpadding: 20,\r\n\t\t\t\tboxSizing: \"border-box\",\r\n\t\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\t\tmargin: \"40px auto\",\r\n\t\t\t\tborderRadius: 3,\r\n\t\t\t\tzIndex: 2,\r\n\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\tboxShadow: \"0 20px 30px rgba(0, 0, 0, 0.2)\",\r\n\t\t\t\t...this.props.style.modal\r\n\t\t\t},\r\n\t\t\toverlay: {\r\n\t\t\t\tposition: \"fixed\",\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tbottom: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tright: 0,\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\t\t\t\tbackgroundColor: \"rgba(0,0,0,0.5)\",\r\n\t\t\t\t...this.props.style.overlay\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// render modal\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...this.outerStyle,\r\n\t\t\t\t\tdisplay: this.props.isModalOpen ? \"block\" : \"none\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div style={this.style.overlay} onClick={this.props.closeModal} />\r\n\t\t\t\t<div onClick={this.props.closeModal} />\r\n\t\t\t\t<div style={this.style.modal}>{this.props.children}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ShapeCountModal;","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport ShapeScreen from './ShapeScreen'\r\nimport LinkedListScreen from './LinkedListScreen'\r\nimport SYMBOLS from '../constants/symbols'\r\nimport MessageScreen from './MessageScreen'\r\nimport ShapeCountModal from './ShapeCountModal'\r\nimport SlidingInput from 'sliding-input'\r\n\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map(k => ({\r\n        id: `i${k + offset}`,\r\n        content: `${SYMBOLS[k]} i${k + offset}`\r\n    }));\r\n\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};\r\n\r\nconst grid = 8;\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 auto 3px auto`,\r\n    width: '70px',\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : 'lightgrey',\r\n    margin: ' 0 auto',\r\n    minHeight: 400\r\n});\r\n\r\nconst modalStyle = {\r\n\toverlay: {\r\n\t\tbackgroundColor: \"rgba(0, 0, 0,0.5)\"\r\n\t}\r\n};\r\n\r\nconst mainStyle = {\r\n\tapp: {\r\n\t\t// margin: \"120px 0\"\r\n\t},\r\n\tbutton: {\r\n\t\tbackgroundColor: \"#408cec\",\r\n\t\tborder: 0,\r\n\t\tpadding: \"12px 20px\",\r\n\t\tcolor: \"#fff\",\r\n\t\tmargin: \"0 auto\",\r\n\t\t// width: 150,\r\n\t\tdisplay: \"block\",\r\n\t\tborderRadius: 3\r\n\t}\r\n};\r\n\r\nclass MainScreen extends Component{\r\n    state = {\r\n        items: [],\r\n        selected: [],\r\n        messages: [],\r\n        toastOpen: false,\r\n        toastMessage: '',\r\n        isModalOpen: false,\r\n        isInnerModalOpen: false,\r\n        shapeCount: 1\r\n    };\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n    getList = id => this.state[this.id2List[id]];\r\n    onDragEnd = result => {\r\n        const { source, destination, draggableId } = result;\r\n        const { selected } = this.state\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            console.log(\"itemsss\", this.state.items)\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n            if(destination.droppableId === 'droppable2'){\r\n                let message = ''\r\n                if((selected.length === 0))\r\n                {\r\n                    message = `${draggableId} added top of the list`\r\n                }else if(typeof result.droppable2[destination.index-1] === \"undefined\"){\r\n                    message = `${draggableId} added top of the list`\r\n                }\r\n                else{\r\n                    message = `${draggableId} added after ${result.droppable2[destination.index-1]['id']}`\r\n                }\r\n                const newMessage = [...this.state.messages, message]\r\n                this.setState({\r\n                    messages: newMessage,\r\n                    toastMessage: message,\r\n                    toastOpen: true\r\n                })\r\n                setTimeout(\r\n                    function() {\r\n                        this.setState({toastOpen: false});\r\n                    }\r\n                    .bind(this),\r\n                    3000\r\n                );\r\n            }\r\n        }\r\n    }\r\n    handleTrash(sourceIndex, item){\r\n        var source = { index: sourceIndex, droppableId: 'droppable2'}\r\n        var destination = { droppableId: 'droppable', index: 0 }\r\n        const result = move(\r\n            this.state.selected,\r\n            this.state.items,\r\n            source,\r\n            destination\r\n        );\r\n        let message = `${item['id']} removed the list`\r\n        const newMessage = [...this.state.messages, message]\r\n        this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2,\r\n            messages: newMessage,\r\n            toastMessage: message,\r\n            toastOpen: true\r\n        });\r\n        setTimeout(\r\n            function() {\r\n                this.setState({toastOpen: false});\r\n            }\r\n            .bind(this),\r\n            3000\r\n        );\r\n    }\r\n    closeModal = () => {\r\n        const { shapeCount } = this.state\r\n\t\tthis.setState({\r\n            isModalOpen: false,\r\n            items: getItems(shapeCount),\r\n            selected: getItems(0, shapeCount),\r\n\t\t});\r\n    }\r\n    componentDidMount(){\r\n        this.openModal()\r\n    }\r\n\r\n\topenModal = () => {\r\n\t\tthis.setState({\r\n\t\t\tisModalOpen: true\r\n\t\t});\r\n    }\r\n    handleInputValue = (value) => {\r\n        this.setState({\r\n            shapeCount: value\r\n        })\r\n    }\r\n    render(){\r\n        const { messages, toastOpen, toastMessage } = this.state\r\n        return(\r\n            <div>\r\n            <div className=\"wrapper\">\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div className='linked-list_screen'>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div>\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <span style={{textAlign: 'center', display: 'block'}}>{item.content}</span>\r\n                                                <br/>\r\n                                                <span  onClick={() => this.handleTrash(index, item)} className=\"delete\">üóëÔ∏è</span>\r\n                                            </div>\r\n                                            <div id=\"arrow\">ü†ª</div>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                </div>\r\n                <div className=\"shape_screen\">\r\n                    <Droppable droppableId=\"droppable\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state.items.map((item, index) => (\r\n                                    <Draggable\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                {item.content}\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n            </div>\r\n            {\r\n                toastOpen &&\r\n                <div id='snackbar'>{toastMessage}</div>\r\n            }\r\n            <MessageScreen messages={messages}/>\r\n            <div style={mainStyle.app}>\r\n\t\t\t\t<ShapeCountModal\r\n\t\t\t\t\tisModalOpen={this.state.isModalOpen}\r\n\t\t\t\t\tcloseModal={this.closeModal}\r\n\t\t\t\t\tstyle={modalStyle}\r\n\t\t\t\t>\r\n                <span>How many shapes do you want to create?</span>\r\n                <br/>\r\n                <SlidingInput min={1} max={25} defaultValue={15} value={1} onChange={this.handleInputValue}/>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tstyle={{\r\n\t\t\t\t\t\t\t...mainStyle.button,\r\n\t\t\t\t\t\t\tmargin: 0,\r\n\t\t\t\t\t\t\twidth: \"auto\",\r\n\t\t\t\t\t\t\tmarginTop: 10\r\n\t\t\t\t\t\t}}\r\n\t\t\t\t\t\tonClick={this.closeModal}\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSave\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</ShapeCountModal>\r\n\t\t\t</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainScreen;","import React, { Component } from 'react';\nimport './App.css';\nimport MainScreen from './components/MainScreen'\n\nclass App extends Component {\n  render() {\n    return (\n      <MainScreen />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}