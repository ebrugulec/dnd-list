{"version":3,"sources":["constants/symbols.js","components/MessageScreen.js","components/ShapeCountModal.js","utils/index.js","components/MainScreen.js","App.js","serviceWorker.js","index.js"],"names":["symbols","MessageScreen","_ref","messages","react_default","a","createElement","className","length","map","message","i","key","ShapeCountModal","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","outerStyle","position","top","left","width","height","overflow","zIndex","style","modal","objectSpread","padding","boxSizing","backgroundColor","margin","borderRadius","textAlign","boxShadow","overlay","bottom","right","display","isModalOpen","onClick","closeModal","children","Component","getItems","count","offset","arguments","undefined","Array","from","v","k","id","concat","content","SYMBOLS","reorder","list","startIndex","endIndex","result","_result$splice","splice","removed","slicedToArray","move","source","destination","droppableSource","droppableDestination","sourceClone","destClone","_sourceClone$splice","index","droppableId","getItemStyle","isDragging","draggableStyle","userSelect","background","getListStyle","isDraggingOver","minHeight","modalStyle","MainScreen","state","items","selected","toastOpen","toastMessage","isInnerModalOpen","shapeCount","id2List","droppable","droppable2","getList","onDragEnd","draggableId","setState","console","log","newMessage","toConsumableArray","setTimeout","bind","assertThisInitialized","openModal","handleInputValue","value","sourceIndex","item","_this2","_this$state","Fragment","react_beautiful_dnd_esm","provided","snapshot","ref","innerRef","assign","draggableProps","dragHandleProps","handleTrash","placeholder","components_MessageScreen","components_ShapeCountModal","dist_default","min","max","defaultValue","onChange","App","components_MainScreen","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35cf4e02.chunk.js","sourcesContent":["export default ['☯', '🎕', '🎗', '🎖', '🏜', '∞', '☾', '🌤', '🌶', '🍽', '☢', '♫', '☀', '❤', '★', '❀', '⌘', '✲', '⎈', '❖', '◆', '𝛂', '◇', '▲', '✿']","import React from 'react'\r\n\r\nconst MessageScreen = ({messages}) => {\r\n    return(\r\n        <div className=\"messages\">\r\n            {\r\n                messages.length>0 &&\r\n                <ul className=\"list\">\r\n                <h4>Activity History</h4>\r\n                    {messages.map((message, i) => (\r\n                        <li key={i}>\r\n                            {message}\r\n                        </li>\r\n                    ))}\r\n                </ul>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageScreen;","import React, { Component } from 'react'\r\nclass ShapeCountModal extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.outerStyle = {\r\n\t\t\tposition: \"fixed\",\r\n\t\t\ttop: 0,\r\n\t\t\tleft: 0,\r\n\t\t\twidth: \"100%\",\r\n\t\t\theight: \"100%\",\r\n\t\t\toverflow: \"auto\",\r\n\t\t\tzIndex: 1\r\n\t\t};\r\n\r\n\t\t// default style\r\n\t\tthis.style = {\r\n\t\t\tmodal: {\r\n\t\t\t\tposition: \"relative\",\r\n\t\t\t\twidth: 500,\r\n\t\t\t\tpadding: 20,\r\n\t\t\t\tboxSizing: \"border-box\",\r\n\t\t\t\tbackgroundColor: \"#fff\",\r\n\t\t\t\tmargin: \"40px auto\",\r\n\t\t\t\tborderRadius: 3,\r\n\t\t\t\tzIndex: 2,\r\n\t\t\t\ttextAlign: \"left\",\r\n\t\t\t\tboxShadow: \"0 20px 30px rgba(0, 0, 0, 0.2)\",\r\n\t\t\t\t...this.props.style.modal\r\n\t\t\t},\r\n\t\t\toverlay: {\r\n\t\t\t\tposition: \"fixed\",\r\n\t\t\t\ttop: 0,\r\n\t\t\t\tbottom: 0,\r\n\t\t\t\tleft: 0,\r\n\t\t\t\tright: 0,\r\n\t\t\t\twidth: \"100%\",\r\n\t\t\t\theight: \"100%\",\r\n\t\t\t\tbackgroundColor: \"rgba(0,0,0,0.5)\",\r\n\t\t\t\t...this.props.style.overlay\r\n\t\t\t}\r\n\t\t};\r\n\t}\r\n\r\n\t// render modal\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tstyle={{\r\n\t\t\t\t\t...this.outerStyle,\r\n\t\t\t\t\tdisplay: this.props.isModalOpen ? \"block\" : \"none\"\r\n\t\t\t\t}}\r\n\t\t\t>\r\n\t\t\t\t<div style={this.style.overlay} onClick={this.props.closeModal} />\r\n\t\t\t\t<div onClick={this.props.closeModal} />\r\n\t\t\t\t<div style={this.style.modal}>{this.props.children}</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ShapeCountModal;","import SYMBOLS from '../constants/symbols'\r\n\r\nexport const getItems = (count, offset = 0) =>\r\nArray.from({ length: count }, (v, k) => k).map(k => ({\r\n    id: `i${k + offset}`,\r\n    content: `${SYMBOLS[k]} i${k + offset}`\r\n}));\r\n\r\nexport const reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list);\r\n    const [removed] = result.splice(startIndex, 1);\r\n    result.splice(endIndex, 0, removed);\r\n\r\n    return result;\r\n};\r\n\r\nexport const move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source);\r\n    const destClone = Array.from(destination);\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed);\r\n\r\n    const result = {};\r\n    result[droppableSource.droppableId] = sourceClone;\r\n    result[droppableDestination.droppableId] = destClone;\r\n\r\n    return result;\r\n};","import React, { Component } from 'react';\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\r\nimport SYMBOLS from '../constants/symbols'\r\nimport MessageScreen from './MessageScreen'\r\nimport ShapeCountModal from './ShapeCountModal'\r\nimport SlidingInput from 'sliding-input'\r\nimport { getItems, reorder, move } from '../utils'\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    userSelect: 'none',\r\n    padding: 12,\r\n    margin: `0 auto 3px auto`,\r\n    width: '200px',\r\n    borderRadius: '6px',\r\n    background: isDragging ? 'lightgreen' : 'grey',\r\n    ...draggableStyle\r\n});\r\n\r\nconst getListStyle = isDraggingOver => ({\r\n    background: isDraggingOver ? 'lightblue' : '#F5F3F3',\r\n    margin: '0 auto',\r\n    minHeight: 400\r\n});\r\n\r\nconst modalStyle = {\r\n\toverlay: {\r\n\t\tbackgroundColor: \"rgba(0, 0, 0,0.5)\"\r\n\t}\r\n};\r\n\r\nclass MainScreen extends Component{\r\n    state = {\r\n        items: [],\r\n        selected: [],\r\n        messages: [],\r\n        toastOpen: false,\r\n        toastMessage: '',\r\n        isModalOpen: false,\r\n        isInnerModalOpen: false,\r\n        shapeCount: 10\r\n    };\r\n    id2List = {\r\n        droppable: 'items',\r\n        droppable2: 'selected'\r\n    };\r\n    getList = id => this.state[this.id2List[id]];\r\n    onDragEnd = result => {\r\n        const { source, destination, draggableId } = result;\r\n        const { selected } = this.state\r\n\r\n        if (!destination) {\r\n            return;\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                this.getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            );\r\n\r\n            let state = { items };\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                state = { selected: items };\r\n            }\r\n\r\n            this.setState(state);\r\n        } else {\r\n            console.log(\"itemsss\", this.state.items)\r\n            const result = move(\r\n                this.getList(source.droppableId),\r\n                this.getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            );\r\n            this.setState({\r\n                items: result.droppable,\r\n                selected: result.droppable2\r\n            });\r\n            if(destination.droppableId === 'droppable2'){\r\n                let message = ''\r\n                if((selected.length === 0))\r\n                {\r\n                    message = `${draggableId} added top of the list`\r\n                }else if(typeof result.droppable2[destination.index-1] === \"undefined\"){\r\n                    message = `${draggableId} added top of the list`\r\n                }\r\n                else{\r\n                    message = `${draggableId} added after ${result.droppable2[destination.index-1]['id']}`\r\n                }\r\n                const newMessage = [...this.state.messages, message]\r\n                this.setState({\r\n                    messages: newMessage,\r\n                    toastMessage: message,\r\n                    toastOpen: true\r\n                })\r\n                setTimeout(\r\n                    function() {\r\n                        this.setState({toastOpen: false});\r\n                    }\r\n                    .bind(this),\r\n                    3000\r\n                );\r\n            }\r\n        }\r\n    }\r\n    handleTrash(sourceIndex, item){\r\n        var source = { index: sourceIndex, droppableId: 'droppable2'}\r\n        var destination = { droppableId: 'droppable', index: 0 }\r\n        const result = move(\r\n            this.state.selected,\r\n            this.state.items,\r\n            source,\r\n            destination\r\n        );\r\n        let message = `${item['id']} removed the list`\r\n        const newMessage = [...this.state.messages, message]\r\n        this.setState({\r\n            items: result.droppable,\r\n            selected: result.droppable2,\r\n            messages: newMessage,\r\n            toastMessage: message,\r\n            toastOpen: true\r\n        });\r\n        setTimeout(\r\n            function() {\r\n                this.setState({toastOpen: false});\r\n            }\r\n            .bind(this),\r\n            3000\r\n        );\r\n    }\r\n    closeModal = () => {\r\n        const { shapeCount } = this.state\r\n\t\tthis.setState({\r\n            isModalOpen: false,\r\n            items: getItems(shapeCount),\r\n            selected: getItems(0, shapeCount),\r\n\t\t});\r\n    }\r\n    componentDidMount(){\r\n        this.openModal()\r\n    }\r\n\r\n\topenModal = () => {\r\n\t\tthis.setState({\r\n\t\t\tisModalOpen: true\r\n\t\t});\r\n    }\r\n    handleInputValue = (value) => {\r\n        this.setState({\r\n            shapeCount: value\r\n        })\r\n    }\r\n    render(){\r\n        const { messages, toastOpen, toastMessage, shapeCount } = this.state\r\n        return(\r\n            <>\r\n            <div className=\"wrapper\">\r\n            <DragDropContext onDragEnd={this.onDragEnd}>\r\n                <div className='linked-list_screen'>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}>\r\n                            {this.state.selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}>\r\n                                    {(provided, snapshot) => (\r\n                                        <div>\r\n                                            <div\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <span className=\"shape\">{item.content}</span>\r\n                                                <br/>\r\n                                                <span  onClick={() => this.handleTrash(index, item)} className=\"delete\">🗑️</span>\r\n                                            </div>\r\n                                            <div id=\"arrow\">🠻</div>\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                </div>\r\n                <div className=\"shape_screen\">\r\n                    <Droppable droppableId=\"droppable\">\r\n                        {(provided, snapshot) => (\r\n                            <div\r\n                            className=\"align\"\r\n                                ref={provided.innerRef}\r\n                                style={getListStyle(snapshot.isDraggingOver)}>\r\n                                {this.state.items.map((item, index) => (\r\n                                    <Draggable\r\n                                        className=\"align\"\r\n                                        key={item.id}\r\n                                        draggableId={item.id}\r\n                                        index={index}>\r\n                                        {(provided, snapshot) => (\r\n                                            <div\r\n                                                className=\"align\"\r\n                                                ref={provided.innerRef}\r\n                                                {...provided.draggableProps}\r\n                                                {...provided.dragHandleProps}\r\n                                                style={getItemStyle(\r\n                                                    snapshot.isDragging,\r\n                                                    provided.draggableProps.style\r\n                                                )}>\r\n                                                <span className=\"shape\">{item.content}</span>\r\n                                            </div>\r\n                                        )}\r\n                                    </Draggable>\r\n                                ))}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                </div>\r\n            </DragDropContext>\r\n            </div>\r\n            {\r\n                toastOpen &&\r\n                <div id='snackbar'>{toastMessage}</div>\r\n            }\r\n            <MessageScreen messages={messages}/>\r\n            <div>\r\n\t\t\t\t<ShapeCountModal\r\n\t\t\t\t\tisModalOpen={this.state.isModalOpen}\r\n\t\t\t\t\tcloseModal={this.closeModal}\r\n\t\t\t\t\tstyle={modalStyle}\r\n\t\t\t\t>\r\n                    <span>How many shapes do you want to create?</span>\r\n                    <br/>\r\n                    <SlidingInput min={1} max={25} defaultValue={15} value={shapeCount} onChange={this.handleInputValue}/>\r\n                    <br/>\r\n                    <br/>\r\n                    <button className=\"modal-button\" onClick={this.closeModal}>\r\n                        Save\r\n                    </button>\r\n\t\t\t\t</ShapeCountModal>\r\n\t\t\t</div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MainScreen;","import React, { Component } from 'react';\nimport './App.css';\nimport MainScreen from './components/MainScreen'\n\nclass App extends Component {\n  render() {\n    return (\n      <MainScreen />\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n        <App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}